# -*- coding: utf-8 -*-
"""Copy of Image Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uib3xtVrMWmhepLtmWOmRPSx3W206Eta
"""

from google.colab import drive
drive.mount('/content/drive')

!pwd

import os
os.chdir('/content/drive/MyDrive/mask_detection')

!pwd

# !unzip data.zip

import os
len(os.listdir('data'))
os.listdir('data')

# import os
# os.chdir('/content/drive/MyDrive/mask_detection')
!pwd

# !git clone https://github.com/balajisrinivas/Face-Mask-Detection.git

!nvidia-smi

from tensorflow import keras
from keras.models import Model
from keras.layers import Dense,Flatten,Conv2D,MaxPool2D
#from keras.applications.vgg16 import VGG16,preprocess_input
#from keras.applications.resnet import ResNet101,preprocess_input
# from keras.applications.resnet_v2 import ResNet101V2,preprocess_input
from keras.applications.mobilenet import MobileNet,preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

import tensorflow as tf
print(tf.__version__)

# resizing images

image_size=[224,224]

train_path='/content/drive/MyDrive/mask_detection/data/train'
valid_path='/content/drive/MyDrive/mask_detection/data/test'

# adding preprocessing layer in front of VGG

mobilenet=MobileNet(input_shape=image_size+[3],weights='imagenet',include_top=False)

# d'nt train existing weights

for layer in mobilenet.layers:
  layer.trainable=False

# finding number of classes

folders=glob('/content/drive/MyDrive/mask_detection/data/train/*')
folders

x=Flatten()(mobilenet.output)
prediction=Dense(len(folders),activation='sigmoid')(x)

model=Model(inputs=mobilenet.input,outputs=prediction)

model.summary()

# Compiling the model

model.compile(loss='binary_crossentropy',optimizer='adamax',metrics=['accuracy'])

train_datagen=ImageDataGenerator(rescale=1/255,
                                 shear_range=0.2,
                                 zoom_range=0.2,
                                 horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1/255)

training_set=train_datagen.flow_from_directory('/content/drive/MyDrive/mask_detection/data/train',target_size=(224,224),batch_size=10,class_mode='categorical')
test_set=test_datagen.flow_from_directory('/content/drive/MyDrive/mask_detection/data/train',target_size=(224,224),batch_size=10)

r=model.fit_generator(training_set,validation_data=test_set,epochs=5,steps_per_epoch=len(training_set),validation_steps=len(test_set))

print(r.history.keys())

# plotting loss and accuracy

## loss
plt.plot(r.history['loss'],label='train loss')
plt.plot(r.history['val_loss'],label='val_loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')


## Accuracies
plt.plot(r.history['accuracy'],label='train accuracy')
plt.plot(r.history['val_accuracy'],label='val_accuracy')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

# serialize the model to disk
print("[INFO] saving mask detector model...")
model.save("mask_detector.model", save_format="h5")